%{
    Finite volume solver for NSWE wave propagation and run-up
    Copyright (C) 2020 Denys DUTYKH

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

%}

%%% -------------------------------------------------- %%%
%%% The main file for NSWE solver based on FV method   %%%
%%% -------------------------------------------------- %%%
%%% Author: Denys Dutykh, CNRS -- LAMA, Univ of Savoie %%%
%%% E-mail: Denys.Dutykh@univ-savoie.fr                %%%
%%% Web:    http://www.denys-dutykh.com/               %%%
%%% Blog:   http://dutykh.github.io/                   %%%
%%% GitHub: https://github.com/dutykh/                 %%%
%%% -------------------------------------------------- %%%
%%% Distributed under GNU General Public License       %%%
%%% -------------------------------------------------- %%%

function [eta1, u1] = BCpull()

    %%% Libraries we use:
    addpath('BC_FVM/sources/');
    addpath('BC_FVM/odetpbar/');

    %%% Global variables:
    %for numerical scheme
    global cf2 d xc FS IN LW
    global a amp td b g g2 dx h N M
    global H1 H2 c1 c2 x1 x2
    global t0 Tf x0 Xf

    %%% Numerical parameters:
    x  = linspace(x0, Xf, N+1)';			% cell interfaces (the apostrophe is to transpose)
    dx = x(2) - x(1);                  	% spatial grid step
    xc = 0.5*(x(1:end-1) + x(2:end));  	% centers of cells

    %%% x = 1 boundary
    xeq = x == 1;
    xeq1_eta = find(xeq);
    xeq1_u = find(xeq) + N;

    %%% Bathymetry function:
    h  = td*xc;

    %%% Choice of the initial condition:
    w0 = zeros(2*N,1);
    w0(1:N) = max(h, eps+0*h);   % zero initial condition without velocities;
    w0(1:N) = w0(1:N) + H1*exp(-c1*(xc - x1).^2) - H2*exp(-c2*(xc - x2).^2);

    %%% We run the simulation:
    options = odeset('AbsTol', 1e-4, 'RelTol', 1e-4, 'OutputFcn', @odetpbar, 'MaxStep', 1.0);
    fprintf('Numeric Simulation...\n');
    sol = ode23(@RHS, [t0 Tf], w0, options);
    fprintf(' Done\n');
    
    
     %%% Post-processing of the solution:
     tlist = linspace(t0, Tf, M);
     solpr = deval(sol, tlist);
    
     U = solpr(1:N,1:M);
     eta = solpr(N+1:end,1:end);
    
    %%% We locate the solution location and graph Phi and Psi
    
    
    xT = x.';
    xSec = xT(1:end-1);

    figure(98)   % FVM solution for U
    mesh(tlist,xSec,U)
    title('Solution for $$\U\$$ (speed) using Finite Volume Method','interpreter','latex','Fontsize',14)
    xlabel('t')
    ylabel('x')
    zlabel('Speed')
    
    
    figure(99)    % FVM solution for Eta
    mesh(tlist,xSec,eta)
    title('Solution for $$\Eta\$$ (height) using Finite Volume Method','interpreter','latex','Fontsize',14)
    xlabel('t (seconds')
    ylabel('x')
    zlabel('Height')
    
    
    % defining solution location:

    u1 = solpr(xeq1_u,:);
    eta1 = solpr(xeq1_eta,:);

end
